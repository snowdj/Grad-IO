# Call solver and give it options

model RustBusMLETableX.mod;
data RustBusMLETableX.dat;
 
# Specify KNITRO solver options:

option knitro_options 'alg=1 outlev=3 maxit=200', solver knitroampl; 
 
# Initial guesses set at trivial values; probably not good initial guess

     let thetaCost := inithetaCost;
     let RC := iniRC;     
     let {i in 1..M} thetaProbs[i] := 1/M;
     let {i in X} EV[i] := iniEV;

# Solve command
     solve MPECZurcher;

if match (solve_message, "Locally optimal solution") > 0 then { 
			printf "%s\n", "Optimal solution found" > output/RustBusMLETableXSol.txt;
                        printf "%5.0f \n", 0 > output/KnitroExit.sol ; 
			}
		else if match (solve_message, "Iteration limit reached") > 0 then { 
			printf "%s\n", "Iteration limit reached" > output/RustBusMLETableXSol.txt;
                        printf "%5.0f \n", 400 > output/KnitroExit.sol ; 
			}
                else if match (solve_message, "Evaluation error") > 0 then { 
			printf "%s\n", "Evaluation error" > output/RustBusMLETableXSol.txt;
			printf "%5.0f \n", 502 > output/KnitroExit.sol ; 
			}
                else {
			printf "%s\n", "No solution" > output/RustBusMLETableXSol.txt;
			printf "%5.0f \n", 1000 > output/KnitroExit.sol ; 
            }
	
printf "%s \n", solve_message > KnitroMessage.sol;	
display _solve_time;

# Output commands
     option display_round 6, display_width 120;

# display the value function
      display EV;

# display the structural parameters (remember beta was fixed)
  display beta, RC, thetaCost, thetaProbs;
  printf "%10.7f \n", _solve_time > output/solvetime.sol;
  printf "%10.7f \n", Likelihood > output/objval.sol;     
  printf "%10.7f \n", RC > output/RC.sol;
  printf "%10.7f \n", thetaCost > output/thetaCost.sol;
for {i in 1..M} {
  	printf "%10.7f \n", thetaProbs[i] > output/thetaProbs.sol;
}

# write EV to a file EV.sol 
for {i in X} {
  	printf "%10.7f \n", EV[i] > output/EV.sol;
}
